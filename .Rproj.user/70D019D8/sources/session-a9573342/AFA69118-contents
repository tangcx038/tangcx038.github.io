[---
pdf_document: default
author: "NM2207: Computational Media Literacy- Tang Ching Xian"
date: "16 October 2023"
output:
  html_document: null
  df_print: paged
  pdf_document: default
title: "Week-9: Code-along & Challenge"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

### Tidy Versus Non-Tidy (Slide #8)

```{r, eval=T,echo=TRUE}
# Load the tidyverse package
library(tidyverse)

# Create a tidy data frame using the tribble function
tidydata <- tribble(
  ~country, ~year, ~cases, ~population,
  "Afghanistan", 1999, 745, 19987071,
  "Afghanistan", 2000, 2666, 20595360,
  "Brazil", 1999, 37737, 172006362,
  "Brazil", 2000, 80488, 174504898,
  "China", 1999, 212258, 1272915272,
  "China", 2000, 213766, 1280428583
)

# Display the tidy data frame
tidydata
```
<br>
### Tidy-ing data: Example 1 (Slide #11 & #12 & #13)

```{r, eval=T,echo=TRUE}
nontidydata <- tribble(
~country,~year,~rate,
"Afghanistan", 1999, "745/19987071",
"Afghanistan", 2000, "2666/20595360",
"Brazil", 1999, "37737/172006362",
"Brazil", 2000, "80488/174504898",
"China", 1999, "212258/1272915272",
"China", 2000, "213766/1280428583")
nontidydata

tidieddata <- nontidydata %>%
separate(rate, into = c("cases",
"population"),
sep = "/")
tidieddata

# Pivot the tidieddata to long format using pivot_longer,
# creating new columns "measurement" and "value" to store variable names and values, respectively.
newtidieddata <- tidieddata %>%
  pivot_longer(cols = cases:population, names_to = "measurement", values_to = "value")
newtidieddata

# Create a ggplot visualization using newtidieddata:
# Scatter plot with lines connecting points, color-coded by country and faceted by measurement.
ggplot(newtidieddata) +
  aes(x = year, y = value, colour = country) +
  geom_point() +
  geom_line(aes(group = country)) +
  facet_wrap(~measurement) +
  theme_bw()

```
<br>

### Tidy-ing data: Example 2 (Slide #14) 

```{r, eval=T,echo=TRUE}
df <- tribble(
~id, ~bp1, ~bp2,
"A", 100, 120,
"B", 140, 115,
"C", 120, 125
)
df


# Pivot the data to long format using pivot_longer
# creating new columns "measurement" and "value" to store variable names and values, respectively.
df %>%
  pivot_longer(cols = bp1:bp2, names_to = "measurement", values_to = "value")

```

### Tidy-ing data: Example 3 (Slide #18)
```{r, eval=T,echo=TRUE}
newtidieddata
# creating new columns "cases" and "population" from the column "measurement"
newtidieddata %>%
pivot_wider(names_from="measurement",
values_from="value")
```

### Tidy-ing data: Example 4 (Slide #19)
```{r, eval=T,echo=TRUE}
df <- tribble(
~id, ~measurement, ~value,
"A", "bp1", 100,
"B", "bp1", 140,
"B", "bp2", 115,
"A", "bp2", 120,
"A", "bp3", 105
)
df


# Pivot the data frame to wide format using pivot_wider
df %>%
  pivot_wider(names_from = measurement, values_from = value)

```


### Challenge week 9 Question 1
```{r, eval=T,echo=TRUE}
# Load the tidyverse package
library(tidyverse)

# Load the billboard dataset
billboard

# Pivot longer to arrange the rank values under new columns "week" and "rank"
billboard_long <- billboard %>%
  pivot_longer(cols = starts_with("wk"), 
               names_to = "week", 
               values_to = "rank",
# Remove observations with the entries "NA"
               values_drop_na = TRUE) %>%
# To only have numbers in the column "week"
  mutate(week = parse_number(week))

billboard_long

# Plot the rank along the y-axis and week along the x-axis
ggplot(billboard_long, aes(x = week, y = rank)) +
  geom_line() +
  labs(x = "Week", y = "Rank")

```

### Challenge week 9 Question 2
```{r, eval=T,echo=TRUE}
# Load the cms_patient_experience dataset
cms_patient_experience

# Pivot wider to create columns "measure_cd"
# Values in the columns correspond to "column prf_rate"
# Use id_cols to specify the columns identifying each row
cms_wide2 <- cms_patient_experience %>%
  pivot_wider(names_from = measure_cd, values_from = prf_rate, id_cols = starts_with("org"))

cms_wide2
```

