{
  "hash": "fccceafbc6e5ad1aeecc54ab9bcb3094",
  "result": {
    "markdown": "---\ntitle: \"Week-3: Code-along\"\nauthor: Tang Ching Xian\ndate: 25/8/2023\noutput:\n  html_document:\n  df_print: paged\npdf_document: default\n---\n\n\n\n\n\n# I. Code to edit and execute\n\n**To be submitted on canvas before attending the tutorial**\n\n\n### Loading packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load package tidyverse\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\n### Assigning values to variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example a.: execute this example\nx <- 'A'\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Complete the code for Example b and execute it\nx <- \"Apple\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Complete the code for Example c and execute it\nx <- FALSE\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Complete the code for Example d and execute it\nX <- 5L\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Complete the code for Example e and execute it\nx <- 5\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Complete the code for Example f and execute it\nx <- 1i\n```\n:::\n\n\n### Checking the type of variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example a.: execute this example\nx <- 'A'\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Complete the code for Example b and execute it\nx <- \"Apple\"\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Complete the code for Example c and execute it\nx <- FALSE\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Complete the code for Example d and execute it\nx <- 5L\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Complete the code for Example e and execute it\nx <- 5\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Complete the code for Example f and execute it\nx <- 1i\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"complex\"\n```\n:::\n:::\n\n\n### Need for data types\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# import the cat-lovers data from the csv file you downloaded from canvas\nread.csv(\"cat-lovers.csv\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  name                                      number_of_cats\n1       Bernice Warren                                                   0\n2        Woodrow Stone                                                   0\n3          Willie Bass                                                   1\n4       Tyrone Estrada                                                   3\n5         Alex Daniels                                                   3\n6           Jane Bates                                                   2\n7       Latoya Simpson                                                   1\n8          Darin Woods                                                   1\n9           Agnes Cobb                                                   0\n10       Tabitha Grant                                                   0\n11         Perry Cross                                                   0\n12         Wanda Silva                                                   0\n13         Alicia Sims                                                   1\n14         Emily Logan                                                   3\n15     Woodrow Elliott                                                   3\n16      Brent Copeland                                                   2\n17       Pedro Carlson                                                   1\n18          Patsy Luna                                                   1\n19       Brett Robbins                                                   0\n20       Oliver George                                                   0\n21        Calvin Perry                                                   1\n22      Lora Gutierrez                                                   1\n23    Charlotte Sparks                                                   0\n24           Earl Mack                                                   0\n25         Leslie Wade                                                   4\n26     Santiago Barker                                                   0\n27           Jose Bell                                                   0\n28         Lynda Smith                                                   0\n29   Bradford Marshall                                                   0\n30       Irving Miller                                                   0\n31    Caroline Simpson                                                   0\n32       Frances Welch                                                   0\n33       Melba Jenkins                                                   0\n34    Veronica Morales                                                   0\n35  Juanita Cunningham                                                   0\n36      Maurice Howard                                                   0\n37         Teri Pierce                                                   0\n38       Phil Franklin                                                   0\n39       Jan Zimmerman                                                   0\n40        Leslie Price                                                   0\n41    Bessie Patterson                                                   0\n42         Ethel Wolfe                                                   0\n43        Naomi Wright                                                   1\n44         Sadie Frank                                                   3\n45       Lonnie Cannon                                                   3\n46         Tony Garcia                                                   2\n47        Darla Newton                                                   1\n48        Ginger Clark 1.5 - honestly I think one of my cats is half human\n49     Lionel Campbell                                                   0\n50      Florence Klein                                                   0\n51     Harriet Leonard                                                   1\n52 Terrence Harrington                                                   0\n53       Travis Garner                                                   1\n54           Doug Bass                                               three\n55          Pat Norris                                                   1\n56          Dawn Young                                                   1\n57       Shari Alvarez                                                   1\n58     Tamara Robinson                                                   0\n59        Megan Morgan                                                   0\n60         Kara Obrien                                                   2\n     handedness\n1          left\n2          left\n3          left\n4          left\n5          left\n6          left\n7          left\n8          left\n9          left\n10         left\n11         left\n12         left\n13         left\n14        right\n15        right\n16        right\n17        right\n18        right\n19        right\n20        right\n21        right\n22        right\n23        right\n24        right\n25        right\n26        right\n27        right\n28        right\n29        right\n30        right\n31        right\n32        right\n33        right\n34        right\n35        right\n36        right\n37        right\n38        right\n39        right\n40        right\n41        right\n42        right\n43        right\n44        right\n45        right\n46        right\n47        right\n48        right\n49        right\n50        right\n51        right\n52        right\n53        right\n54        right\n55        right\n56 ambidextrous\n57 ambidextrous\n58 ambidextrous\n59 ambidextrous\n60 ambidextrous\n```\n:::\n\n```{.r .cell-code}\ncat_lovers <- read.csv(\"cat-lovers.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute the mean of the number of cats: execute this command\nmean(cat_lovers$number_of_cats)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in mean.default(cat_lovers$number_of_cats): argument is not numeric or\nlogical: returning NA\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get more information about the mean() command using ? operator\n?mean\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nstarting httpd help server ... done\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert the variable number_of_cats using as.integer()\nmean(as.integer(cat_lovers$number_of_cats))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in mean(as.integer(cat_lovers$number_of_cats)): NAs introduced by\ncoercion\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Display the elements of the column number_of_cats \ncat_lovers$number_of_cats\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"0\"                                                  \n [2] \"0\"                                                  \n [3] \"1\"                                                  \n [4] \"3\"                                                  \n [5] \"3\"                                                  \n [6] \"2\"                                                  \n [7] \"1\"                                                  \n [8] \"1\"                                                  \n [9] \"0\"                                                  \n[10] \"0\"                                                  \n[11] \"0\"                                                  \n[12] \"0\"                                                  \n[13] \"1\"                                                  \n[14] \"3\"                                                  \n[15] \"3\"                                                  \n[16] \"2\"                                                  \n[17] \"1\"                                                  \n[18] \"1\"                                                  \n[19] \"0\"                                                  \n[20] \"0\"                                                  \n[21] \"1\"                                                  \n[22] \"1\"                                                  \n[23] \"0\"                                                  \n[24] \"0\"                                                  \n[25] \"4\"                                                  \n[26] \"0\"                                                  \n[27] \"0\"                                                  \n[28] \"0\"                                                  \n[29] \"0\"                                                  \n[30] \"0\"                                                  \n[31] \"0\"                                                  \n[32] \"0\"                                                  \n[33] \"0\"                                                  \n[34] \"0\"                                                  \n[35] \"0\"                                                  \n[36] \"0\"                                                  \n[37] \"0\"                                                  \n[38] \"0\"                                                  \n[39] \"0\"                                                  \n[40] \"0\"                                                  \n[41] \"0\"                                                  \n[42] \"0\"                                                  \n[43] \"1\"                                                  \n[44] \"3\"                                                  \n[45] \"3\"                                                  \n[46] \"2\"                                                  \n[47] \"1\"                                                  \n[48] \"1.5 - honestly I think one of my cats is half human\"\n[49] \"0\"                                                  \n[50] \"0\"                                                  \n[51] \"1\"                                                  \n[52] \"0\"                                                  \n[53] \"1\"                                                  \n[54] \"three\"                                              \n[55] \"1\"                                                  \n[56] \"1\"                                                  \n[57] \"1\"                                                  \n[58] \"0\"                                                  \n[59] \"0\"                                                  \n[60] \"2\"                                                  \n```\n:::\n\n```{.r .cell-code}\nas.integer(cat_lovers$number_of_cats)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: NAs introduced by coercion\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  0  0  1  3  3  2  1  1  0  0  0  0  1  3  3  2  1  1  0  0  1  1  0  0  4\n[26]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  3  3  2  1 NA  0  0\n[51]  1  0  1 NA  1  1  1  0  0  2\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Display the elements of the column number_of_cats after converting it using as.numeric()\nas.numeric(cat_lovers$number_of_cats)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: NAs introduced by coercion\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  0  0  1  3  3  2  1  1  0  0  0  0  1  3  3  2  1  1  0  0  1  1  0  0  4\n[26]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  3  3  2  1 NA  0  0\n[51]  1  0  1 NA  1  1  1  0  0  2\n```\n:::\n:::\n\n\n### Create an empty vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Empty vector\nx <- vector()\n# Type of the empty vector\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n:::\n\n\n### Create vectors of type logical\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 1\nx<-vector(\"logical\",length=5)\n# Display the contents of x\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE FALSE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\n# Display the type of x\nprint(typeof(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 2\nx<-logical(5)\n# Display the contents of x\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE FALSE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\n# Display the type of x\nprint(typeof(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 3\nx<-c(TRUE,FALSE,TRUE,FALSE,TRUE)\n# Display the contents of x\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE  TRUE FALSE  TRUE\n```\n:::\n\n```{.r .cell-code}\n# Display the type of x\nprint(typeof(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n:::\n\n\n### Create vectors of type character\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 1\nx<-vector(\"character\",length=5)\n# Display the contents of x\nprint(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\n# Display the type of x\nprint(typeof(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 2\nx<-character(5)\n# Display the contents of x\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"\" \"\" \"\" \"\" \"\"\n```\n:::\n\n```{.r .cell-code}\n# Display the type of x\nprint(typeof(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 3\nx<-c('A','b','r','q')\n# Display the contents of x\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"A\" \"b\" \"r\" \"q\"\n```\n:::\n\n```{.r .cell-code}\n# Display the type of x\nprint(typeof(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n### Create vectors of type integer\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 1\nx<-vector(\"integer\",length=5)\n# Display the contents of x\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 0 0 0 0\n```\n:::\n\n```{.r .cell-code}\n# Display the type of x\nprint(typeof(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 2\nx<-integer(5)\n# Display the contents of x\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 0 0 0 0\n```\n:::\n\n```{.r .cell-code}\n# Display the type of x\nprint(typeof(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 3\nx<-c(1,2,3,4,5)\n# Display the contents of x\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n\n```{.r .cell-code}\n# Display the type of x\nprint(typeof(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 4\nx<-seq(from=1,to=5,by=0.1)\n# Display the contents of x\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8\n[20] 2.9 3.0 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8 3.9 4.0 4.1 4.2 4.3 4.4 4.5 4.6 4.7\n[39] 4.8 4.9 5.0\n```\n:::\n\n```{.r .cell-code}\n# Display the type of x\nprint(typeof(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 5\nx<-1:5\n# Display the contents of x\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n\n```{.r .cell-code}\n# Display the type of x\nprint(typeof(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n:::\n\n\n### Create vectors of type double\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 1\nx<-vector(\"double\",length=5)\n# Display the contents of x\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 0 0 0 0\n```\n:::\n\n```{.r .cell-code}\n# Display the type of x\nprint(typeof(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 2\nx<-double(5)\n# Display the contents of x\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 0 0 0 0\n```\n:::\n\n```{.r .cell-code}\n# Display the type of x\nprint(typeof(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 3\nx<-c(1.787,0.63573,2.3890)\n# Display the contents of x\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.78700 0.63573 2.38900\n```\n:::\n\n```{.r .cell-code}\n# Display the type of x\nprint(typeof(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n:::\n\n\n### Implicit coercion\n\n#### Example 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a vector\nx <- c(1.8)\n# Check the type of x\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add a character to the vector\nx <- c(x,'a')\n# Check the type of x\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n#### Example 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(TRUE)\n# Check the type of x\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add a number to the vector\nx <- c(x,2)\n# Check the type of x\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n:::\n\n\n#### Example 3\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c('a')\n# Check the type of x\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(x,TRUE)\n# Check the type of x\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n\n#### Example 4\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1L)\n# Check the type of x\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(x,2)\n# Check the type of x\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n:::\n\n\n### Explicit coercion\n\n#### Example 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a vector\nx <- c(1L)\n# Check the type of x\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert the vector to type character\nx <- as.character(x)\n# Check the type of x\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n#### Example 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a vector\nx <- c('A')\n# Check the type of x\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert the vector to type character\nx <- as.numeric(x)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: NAs introduced by coercion\n```\n:::\n\n```{.r .cell-code}\n# Check the type of x\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n:::\n\n\n### Accessing elements of the vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a vector\nx <- c(1,10,9,8,1,3,5)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Access one element with index 3\nx[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Access elements with consecutive indices, 2 to 4: 2,3,4\nx[2:4]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10  9  8\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Access elements with non-consecutive indices, 1,3,5\nx[c(1,3,5)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 9 1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Access elements using logical vector\nx[c(TRUE,FALSE,FALSE,TRUE,FALSE,FALSE,TRUE)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 8 5\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Access elements using the conditional operator <\nx[x<10]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 9 8 1 3 5\n```\n:::\n:::\n\n\n### Examining vectors\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Display the length of the vector\nprint(length(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7\n```\n:::\n\n```{.r .cell-code}\n# Display the type of the vector\nprint(typeof(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\n# Display the structure of the vector\nprint(str(x))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n num [1:7] 1 10 9 8 1 3 5\nNULL\n```\n:::\n:::\n\n\n### Lists\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Initialise a named list\nmy_pie = list(type=\"key lime\", diameter=7, is.vegetarian=TRUE)\n# display the list\nmy_pie\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$type\n[1] \"key lime\"\n\n$diameter\n[1] 7\n\n$is.vegetarian\n[1] TRUE\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Print the names of the list\nprint(names(my_pie))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"type\"          \"diameter\"      \"is.vegetarian\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Retrieve the element named type\nmy_pie$type\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"key lime\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Retrieve a truncated list\nmy_pie[\"type\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$type\n[1] \"key lime\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Retrieve the element named type\nmy_pie[[\"type\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"key lime\"\n```\n:::\n:::\n\n\n#### Exploring data-sets\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install package--> When i enter install.packages(\"openintro\"), unable to knit\n# Load the package\nlibrary(openintro)\n# Loading required package: airports\nlibrary(airports)\n## Loading required package: cherryblossom\nlibrary(cherryblossom)\n## Loading required package: usdata\nlibrary(usdata)\n# Load package\nlibrary(tidyverse)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Catch a glimpse of the data-set: see how the rows are stacked one below another\nglimpse(loans_full_schema)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 10,000\nColumns: 55\n$ emp_title                        <chr> \"global config engineer \", \"warehouse…\n$ emp_length                       <dbl> 3, 10, 3, 1, 10, NA, 10, 10, 10, 3, 1…\n$ state                            <fct> NJ, HI, WI, PA, CA, KY, MI, AZ, NV, I…\n$ homeownership                    <fct> MORTGAGE, RENT, RENT, RENT, RENT, OWN…\n$ annual_income                    <dbl> 90000, 40000, 40000, 30000, 35000, 34…\n$ verified_income                  <fct> Verified, Not Verified, Source Verifi…\n$ debt_to_income                   <dbl> 18.01, 5.04, 21.15, 10.16, 57.96, 6.4…\n$ annual_income_joint              <dbl> NA, NA, NA, NA, 57000, NA, 155000, NA…\n$ verification_income_joint        <fct> , , , , Verified, , Not Verified, , ,…\n$ debt_to_income_joint             <dbl> NA, NA, NA, NA, 37.66, NA, 13.12, NA,…\n$ delinq_2y                        <int> 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0…\n$ months_since_last_delinq         <int> 38, NA, 28, NA, NA, 3, NA, 19, 18, NA…\n$ earliest_credit_line             <dbl> 2001, 1996, 2006, 2007, 2008, 1990, 2…\n$ inquiries_last_12m               <int> 6, 1, 4, 0, 7, 6, 1, 1, 3, 0, 4, 4, 8…\n$ total_credit_lines               <int> 28, 30, 31, 4, 22, 32, 12, 30, 35, 9,…\n$ open_credit_lines                <int> 10, 14, 10, 4, 16, 12, 10, 15, 21, 6,…\n$ total_credit_limit               <int> 70795, 28800, 24193, 25400, 69839, 42…\n$ total_credit_utilized            <int> 38767, 4321, 16000, 4997, 52722, 3898…\n$ num_collections_last_12m         <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ num_historical_failed_to_pay     <int> 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0…\n$ months_since_90d_late            <int> 38, NA, 28, NA, NA, 60, NA, 71, 18, N…\n$ current_accounts_delinq          <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ total_collection_amount_ever     <int> 1250, 0, 432, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ current_installment_accounts     <int> 2, 0, 1, 1, 1, 0, 2, 2, 6, 1, 2, 1, 2…\n$ accounts_opened_24m              <int> 5, 11, 13, 1, 6, 2, 1, 4, 10, 5, 6, 7…\n$ months_since_last_credit_inquiry <int> 5, 8, 7, 15, 4, 5, 9, 7, 4, 17, 3, 4,…\n$ num_satisfactory_accounts        <int> 10, 14, 10, 4, 16, 12, 10, 15, 21, 6,…\n$ num_accounts_120d_past_due       <int> 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, …\n$ num_accounts_30d_past_due        <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ num_active_debit_accounts        <int> 2, 3, 3, 2, 10, 1, 3, 5, 11, 3, 2, 2,…\n$ total_debit_limit                <int> 11100, 16500, 4300, 19400, 32700, 272…\n$ num_total_cc_accounts            <int> 14, 24, 14, 3, 20, 27, 8, 16, 19, 7, …\n$ num_open_cc_accounts             <int> 8, 14, 8, 3, 15, 12, 7, 12, 14, 5, 8,…\n$ num_cc_carrying_balance          <int> 6, 4, 6, 2, 13, 5, 6, 10, 14, 3, 5, 3…\n$ num_mort_accounts                <int> 1, 0, 0, 0, 0, 3, 2, 7, 2, 0, 2, 3, 3…\n$ account_never_delinq_percent     <dbl> 92.9, 100.0, 93.5, 100.0, 100.0, 78.1…\n$ tax_liens                        <int> 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ public_record_bankrupt           <int> 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0…\n$ loan_purpose                     <fct> moving, debt_consolidation, other, de…\n$ application_type                 <fct> individual, individual, individual, i…\n$ loan_amount                      <int> 28000, 5000, 2000, 21600, 23000, 5000…\n$ term                             <dbl> 60, 36, 36, 36, 36, 36, 60, 60, 36, 3…\n$ interest_rate                    <dbl> 14.07, 12.61, 17.09, 6.72, 14.07, 6.7…\n$ installment                      <dbl> 652.53, 167.54, 71.40, 664.19, 786.87…\n$ grade                            <fct> C, C, D, A, C, A, C, B, C, A, C, B, C…\n$ sub_grade                        <fct> C3, C1, D1, A3, C3, A3, C2, B5, C2, A…\n$ issue_month                      <fct> Mar-2018, Feb-2018, Feb-2018, Jan-201…\n$ loan_status                      <fct> Current, Current, Current, Current, C…\n$ initial_listing_status           <fct> whole, whole, fractional, whole, whol…\n$ disbursement_method              <fct> Cash, Cash, Cash, Cash, Cash, Cash, C…\n$ balance                          <dbl> 27015.86, 4651.37, 1824.63, 18853.26,…\n$ paid_total                       <dbl> 1999.330, 499.120, 281.800, 3312.890,…\n$ paid_principal                   <dbl> 984.14, 348.63, 175.37, 2746.74, 1569…\n$ paid_interest                    <dbl> 1015.19, 150.49, 106.43, 566.15, 754.…\n$ paid_late_fees                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Selecting numeric variables\nloans <- loans_full_schema %>% # <-- pipe operator\n  select(paid_total, term, interest_rate,\n         annual_income,paid_late_fees,debt_to_income)\n# View the columns stacked one below another\nglimpse(loans)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 10,000\nColumns: 6\n$ paid_total     <dbl> 1999.330, 499.120, 281.800, 3312.890, 2324.650, 873.130…\n$ term           <dbl> 60, 36, 36, 36, 36, 36, 60, 60, 36, 36, 60, 60, 36, 60,…\n$ interest_rate  <dbl> 14.07, 12.61, 17.09, 6.72, 14.07, 6.72, 13.59, 11.99, 1…\n$ annual_income  <dbl> 90000, 40000, 40000, 30000, 35000, 34000, 35000, 110000…\n$ paid_late_fees <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ debt_to_income <dbl> 18.01, 5.04, 21.15, 10.16, 57.96, 6.46, 23.66, 16.19, 3…\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Selecting categoric variables\nloans <- loans_full_schema %>% \n  select( ) # type the chosen columns as in the lecture slide\n# View the columns stacked one below another\nglimpse(loans)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 10,000\nColumns: 0\n```\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}