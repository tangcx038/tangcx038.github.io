clean_waste_03_22$wasting_rate <- round(
1-clean_waste_03_22$recycling_rate,2
)
# Display the cleaned data
head(clean_waste_03_22)
# Libraries
library(tidyverse)
library(shiny)
library(plotly)
# Reading the CSV files
waste_03_22 <- read.csv('2003_2022_waste.csv')
# Renaming columns and mutating the data to convert values from kilo-tonnes to tonnes
clean_waste_03_22 <- waste_03_22 %>%
rename(
waste_type = "waste_type",
total_waste_generated_tonne = "total_generate_1k_tonnes",
total_waste_recycled_tonne = "total_recycled_1k_tonnes",
total_waste_not_recycled_tonne = "total_not_recycled_1k_tonnes",
year = "year"
) %>%
mutate(
total_waste_generated_tonne = total_waste_generated_tonne * 1000,
total_waste_recycled_tonne = total_waste_recycled_tonne * 1000
)
# Define UI for the Shiny app
ui <- fluidPage(
titlePanel("Waste Visualization App"),
sidebarLayout(
sidebarPanel(
selectInput("material", "Choose Material:",
choices = unique(clean_waste_03_22$waste_type),
selected = "Plastics")
),
mainPanel(
plotlyOutput("waste_plot")
)
)
)
# Define server logic for the Shiny app
server <- function(input, output) {
# Filter data based on selected material
selected_data <- reactive({
clean_waste_03_22 %>%
filter(waste_type == input$material)
})
# Render the plot
output$waste_plot <- renderPlotly({
gg <- ggplot(selected_data(), aes(x = year)) +
geom_line(aes(y = total_waste_generated_tonne, color = "Waste Generated"), size = 1) +
geom_line(aes(y = total_waste_recycled_tonne, color = "Waste Recycled"), size = 1) +
geom_line(aes(y = total_waste_not_recycled_tonne, color = "Waste Not Recycled"), size = 1) +
labs(title = paste("Waste Over Years -", input$material),
x = "Year", y = "Tonnes") +
theme_minimal()
ggplotly(gg, tooltip = "text")
})
}
# Run the Shiny app
shinyApp(ui, server)
# Colors
custom_colors <- viridis::mako(n=30)
# Grouping by material and summarizing total waste and recycled
summary_df <- clean_waste_03_22 %>%
group_by(waste_type) %>%
summarise(
total_waste_generated = sum(total_waste_generated_tonne),
total_waste_recycled = sum(total_waste_recycled_tonne)
) %>%
arrange(desc(total_waste_generated))
# Adding relevant headings
colnames(summary_df) <- c("Material", "Total Waste Generated (tonnes)", "Total Waste Recycled (tonnes)")
# Displaying the summarized data
summary_df
# Adapted code for waste data
clean_waste_03_22 %>%
group_by(waste_type) %>%
summarise(
total_waste_generated = sum(total_waste_generated_tonne),
total_waste_recycled = sum(total_waste_recycled_tonne)
) %>%
arrange(desc(total_waste_generated)) %>%
head(15)
clean_waste_03_22 <- clean_waste_03_22 %>%
pivot_longer(cols = disposed_tonnes:generated_tonnes,
names_to = "Sector",
values_to = "Tonnes") %>%
mutate(Sector = case_when(
Sector == "disposed_tonnes" ~ "Disposed",
Sector == "generated_tonnes" ~ "Generated",
Sector == "recycled_tonnes" ~ "Recycled",
TRUE ~ as.character(Sector)
))
# Bar Plot for Waste Generated and Waste Recycled
fig <- plot_ly(
x = clean_waste_03_22$year,
y = clean_waste_03_22$total_waste_generated_tonne,
type = "bar",
name = "Waste Generated"
) %>%
add_trace(
x = clean_waste_03_22$year,
y = clean_waste_03_22$total_waste_recycled_tonne,
type = "bar",
name = "Waste Recycled"
) %>%
add_trace(
x = clean_waste_03_22$year,
y = clean_waste_03_22$total_waste_not_recycled_tonne,
type = "bar",
name = "Waste Not Recycled"
)
fig
library(flexdashboard)
library(tidyverse)
library(highcharter)
library(gt)
library(htmltools)
library(viridis)
library(maps)
library(sf)
library(shiny)
# Libraries
library(tidyverse)
library(maps)
library(sf)
library(shiny)
library(plotly)
# Function to create the interactive map
createInteractiveMap <- function(selected_country) {
# Import the data with coordinates
world_map <- map_data("world")
accesstonet <- read.csv("food-waste-by-country-2023.csv")
map_data <- accesstonet %>% rename(country = Country)
map <- left_join(world_map, map_data, by = "country")
# Create the ggplot object
gg <- ggplot(map, aes(x = long, y = lat, group = group, text = paste("Country: ", country, "<br>Annual Kg per Capita: ", FoodWaste2021kgcapitayear))) +
geom_polygon(aes(fill = FoodWaste2021kgcapitayear), color = "white", size = 0.03) +
scale_fill_gradient(low = "lightgreen", high = "darkgreen") +
theme_minimal()
# Convert ggplot to plotly
map_plotly <- ggplotly(gg, tooltip = "text")
# Set initial zoom to the selected country
if (!is.null(selected_country)) {
map_plotly$x$layout$geo$fitbounds <- "locations"
map_plotly$x$data[[1]]$locations <- selected_country
}
# Display the interactive map
return(map_plotly)
}
# Shiny app
ui <- fluidPage(
selectInput("selected_country", "Select Country", choices = ""),
plotlyOutput("interactive_map")
)
server <- function(input, output, session) {
observe({
choices <- unique(read.csv("food-waste-by-country-2023.csv")$Country)
updateSelectInput(session, "selected_country", choices = choices)
})
# Update the map based on the selected country
output$interactive_map <- renderPlotly({
selected_country_data <- filter(read.csv("food-waste-by-country-2023.csv"), country == input$selected_country)
map_plot <- createInteractiveMap(selected_country_data$country)
map_plot
})
}
shinyApp(ui, server)
# Libraries
library(tidyverse)
library(maps)
library(sf)
library(shiny)
library(plotly)
# Function to create the interactive map
createInteractiveMap <- function(selected_country) {
# Import the data with coordinates
world_map <- map_data("world")
accesstonet <- read.csv("food-waste-by-country-2023.csv")
map_data <- accesstonet %>% rename(country = Country)
map <- left_join(world_map, map_data, by = "country")
# Create the ggplot object
gg <- ggplot(map, aes(x = long, y = lat, group = group, text = paste("Country: ", country, "<br>Annual Kg per Capita: ", FoodWaste2021kgcapitayear))) +
geom_polygon(aes(fill = FoodWaste2021kgcapitayear), color = "white", size = 0.03) +
scale_fill_gradient(low = "lightgreen", high = "darkgreen") +
theme_minimal() +
theme(legend.position = "top")  # Set legend position to top
# Convert ggplot to plotly
map_plotly <- ggplotly(gg, tooltip = "text")
# Set initial zoom to the selected country
if (!is.null(selected_country)) {
map_plotly$x$layout$geo$fitbounds <- "locations"
map_plotly$x$data[[1]]$locations <- selected_country
}
# Display the interactive map
return(map_plotly)
}
# Shiny app
ui <- fluidPage(
selectInput("selected_country", "Select Country", choices = ""),
plotlyOutput("interactive_map")
)
server <- function(input, output, session) {
observe({
choices <- unique(read.csv("food-waste-by-country-2023.csv")$Country)
updateSelectInput(session, "selected_country", choices = choices)
})
# Update the map based on the selected country
output$interactive_map <- renderPlotly({
selected_country_data <- filter(read.csv("food-waste-by-country-2023.csv"), country == input$selected_country)
map_plot <- createInteractiveMap(selected_country_data$country)
map_plot
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(plotly)
library(tidyverse)
# Load your data
fwd_data <- read.csv("FWD.csv")
# UI
ui <- dashboardPage(
dashboardHeader(title = "Interactive Boxplot and Heatmap"),
dashboardSidebar(),
dashboardBody(
box(title = "Boxplot by Stage",
plotlyOutput("boxplot")),
box(title = "Heatmap of Available Data",
plotlyOutput("heatmap"))
)
)
# Server
server <- function(input, output) {
# Reactive subset of data for selected stages
selected_stages <- reactive({
fwd_data %>%
select("Stage", "Retail", "FoodServices", "Households")
})
# Boxplot
output$boxplot <- renderPlotly({
plot_ly(selected_stages(),
y = ~Retail,
type = "box",
name = "Retail") %>%
add_trace(y = ~FoodServices, name = "Food Services") %>%
add_trace(y = ~Households, name = "Households") %>%
layout(title = "Boxplot by Stage",
xaxis = list(title = "Stage"),
yaxis = list(title = "Value"))
})
# Heatmap
output$heatmap <- renderPlotly({
plot_ly(z = ~selected_stages()$Retail,
x = ~selected_stages()$Stage,
y = ~c("Retail")) %>%
add_trace(z = ~selected_stages()$FoodServices, y = ~c("Food Services")) %>%
add_trace(z = ~selected_stages()$Households, y = ~c("Households")) %>%
layout(title = "Heatmap of Available Data",
xaxis = list(title = "Stage"),
yaxis = list(title = ""),
barmode = "stack")
})
}
# Run the Shiny app
shinyApp(ui, server)
cat("
<section class=\"image-container\">
<img src=\"src/delicious-vietnamese-food-including-pho-ga-noodles-spring-rolls-white-table.jpg\" style=\"width:100%;height:300px;object-fit:cover;\"/>
<h5 class=\"center-text-bg-img\">Unveiling the true severity of food waste</h5>
<p class=\"bottom-right-text-bg-img\">Image by [Freepik](https://www.freepik.com/free-photo/close-up-hand-holding-wooden-board_14351726.htm#query=food%20waste&position=26&from_view=search&track=ais)</p>
</section>
<section id=\"introduction\" class=\"container\" width=\"100%\">
<h4 class=\"text-center fw-bold my-4\">Introduction</h4>
<p>Food comes from a long journey, starting with the farmer and ending up in our homes. This journey, called the supply chain, uses a lot of the Earth's resources. When we sit down to eat, we get to enjoy the amazing result. Tradition and good cooking bring us tasty, nourishing, joyful, passionate, and life-giving meals. However, the sad truth is that we throw away a ton of our foodâ€”loads of it! And when we do that, we're also tossing away all the valuable resources that were essential to make it in the first place.</p>
<p>**WASTING FOOD IS WASTING AGRICULTURAL LAND.** The food produced but wasted globally every year requires 1.4 billion hectares of land, which is close to 30% of the world agricultural land area (UNEP, 2022).</p>
<p>**WASTING FOOD IS CONTRIBUTING TO GLOBAL WARMING.** The carbon footprint of food wasted globally every year is 3.3 billion tonnes of carbon dioxide. If food waste was a country, it would be the third top emitter after the USA and China (FAO, 2011).</p>
<p>**WASTING FOOD IS WASTING MONEY.** Besides its environmental cost, food wastage also represents a loss of economic value. On a global scale, the economic cost of the overall amount of food wastage is about $US 750 billion, equivalent to the GDP of Switzerland (FAO, 2011).</p>
<h4 id=\"Wondering how much food we waste\" class=\"text-center fw-bold my-4\">How much **food is wasted?**</h4>
<p>According to the **United Nations' Food and Agricultural Organisation of United Nation (FAO)**, an estimation of all the food produced every year for human consumption in the world, one-third does not reach our stomachs.</p>
</section>
")
library(flexdashboard)
library(tidyverse)
library(highcharter)
library(gt)
library(htmltools)
library(viridis)
library(maps)
library(sf)
library(shiny)
## Libraries
library(tidyverse)
library(maps)
library(sf)
library(shiny)
createInteractiveMap <- function(data_file, map_resolution = "world") {
library(ggplot2)
library(dplyr)
library(plotly)
# Import the data with coordinates
world_map <- map_data(map_resolution)
accesstonet <- read.csv(data_file)
map_data <- accesstonet %>% rename(region = country)
map <- left_join(world_map, map_data, by = "Country")
# Create the ggplot object
gg <- ggplot(map, aes(long, lat, group = group, text = paste("Country: ", country, "<br>Annual Kg per Capita: ", FoodWaste2021kgcapitayear))) +
geom_polygon(aes(fill = FoodWaste2021kgcapitayear), color = "white", size = 0.03) +
scale_fill_gradient(low = "lightgreen", high = "darkgreen") +
theme_minimal()
# Convert ggplot to plotly
map_plotly <- ggplotly(gg, tooltip = "text")
# Display the interactive map
return(map_plotly)
}
## Libraries
library(tidyverse)
library(maps)
library(sf)
library(plotly)
createInteractiveMap <- function(data_file, map_resolution = "world") {
# Import the data with coordinates
world_map <- map_data(map_resolution)
accesstonet <- read.csv(data_file)
map_data <- accesstonet %>% rename(region = country)
map <- left_join(world_map, map_data, by = "region")
# Create the ggplot object
gg <- ggplot(map, aes(long, lat, group = group, text = paste("Country: ", region, "<br>Annual Kg per Capita: ", FoodWaste2021kgcapitayear))) +
geom_polygon(aes(fill = FoodWaste2021kgcapitayear), color = "white", size = 0.03) +
scale_fill_gradient(low = "lightgreen", high = "darkgreen") +
theme_minimal()
# Convert ggplot to plotly with specified width and height
map_plotly <- ggplotly(gg, tooltip = "text", width = 1000, height = 600)
# Set scrollZoom to FALSE
map_plotly$x$layout$updatemenus <- list(list(type = "zoom",
showactive = FALSE,
buttons = list(list(args = list("zoomType", "zoomin"),
label = "Zoom In",
method = "relayout"),
list(args = list("zoomType", "zoomout"),
label = "Zoom Out",
method = "relayout")),
direction = "left",
pad = list(r = 10, t = 87),
showactive = FALSE,
type = "buttons",
x = 0.1,
y = 1))
# Display the interactive map
return(map_plotly)
}
# Usage
interactiveMap <- createInteractiveMap("food-waste-by-country-2023.csv")
interactiveMap
# Load necessary libraries
library(readr)
library(ggplot2)
# Read the CSV file
FWD_UNEP <- read_csv("FWD.csv")
# Function to calculate total estimates for each sector
calculate_total <- function(data, column) {
return(sum(data[[column]]))
}
# Calculate total estimates for each sector
total_household <- calculate_total(FWD_UNEP, "household_estimate_tpy")
total_retail <- calculate_total(FWD_UNEP, "retail_estimate_tpy")
total_food_service <- calculate_total(FWD_UNEP, "food_service_estimate_tpy")
# Create a data frame with total estimates
total_FW_by_sector <- data.frame(
category = c("Household", "Retail", "Food Service"),
value = c(total_household, total_retail, total_food_service),
color = c("#d62023", "#3fb619", "#8FB8FDff")
)
# Function to create bar and pie charts
create_chart <- function(data, x, y, fill, title, x_label, y_label, coord_type = NULL) {
ggplot(data, aes_string(x = x, y = y, fill = fill)) +
geom_bar(stat = "identity", color = "black", width = 0.7) +
labs(title = title, x = x_label, y = y_label) +
scale_fill_manual(values = c("#d62023", "#3fb619", "#8FB8FDff")) +
if (!is.null(coord_type)) coord_type else NULL
}
# Create bar chart
bar_chart <- create_chart(total_FW_by_sector, "category", "value", "category",
"Total Food Waste by Sector", "Sector", "Total Food Waste (tpy)", NULL)
# Create pie chart
pie_chart <- create_chart(total_FW_by_sector, "", "value", "category",
"Total Food Waste Distribution", "Sector", "Sector",
coord_type = coord_polar("y"))
## Libraries
library(tidyverse)
library(maps)
library(sf)
library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
createInteractiveMap <- function(data_file, map_resolution = "world") {
# Import the data with coordinates
world_map <- map_data(map_resolution)
accesstonet <- read.csv(data_file)
map_data <- accesstonet %>% rename(region = country)
map <- left_join(world_map, map_data, by = "Country")
# Create the ggplot object
gg <- ggplot(map, aes(long, lat, group = group, text = paste("Country: ", country, "<br>Annual Kg per Capita: ", FoodWaste2021kgcapitayear))) +
geom_polygon(aes(fill = FoodWaste2021kgcapitayear), color = "white", size = 0.03) +
scale_fill_gradient(low = "lightgreen", high = "darkgreen") +
theme_minimal()
# Convert ggplot to plotly
map_plotly <- ggplotly(gg, tooltip = "text")
# Display the interactive map
return(map_plotly)
}
## Libraries
library(tidyverse)
library(maps)
library(sf)
library(plotly)
createInteractiveMap <- function(data_file, map_resolution = "world") {
# Import the data with coordinates
world_map <- map_data(map_resolution)
accesstonet <- read.csv(data_file)
map_data <- accesstonet %>% rename(region = country)
map <- left_join(world_map, map_data, by = "region")
# Create the ggplot object
gg <- ggplot(map, aes(long, lat, group = group, text = paste("Country: ", region, "<br>Annual Kg per Capita: ", FoodWaste2021kgcapitayear))) +
geom_polygon(aes(fill = FoodWaste2021kgcapitayear), color = "white", size = 0.03) +
scale_fill_gradient(low = "lightgreen", high = "darkgreen") +
theme_minimal()
# Convert ggplot to plotly with specified width and height
map_plotly <- ggplotly(gg, tooltip = "text", width = 1000, height = 600)
# Set scrollZoom to FALSE
map_plotly$x$layout$updatemenus <- list(list(type = "zoom",
showactive = FALSE,
buttons = list(list(args = list("zoomType", "zoomin"),
label = "Zoom In",
method = "relayout"),
list(args = list("zoomType", "zoomout"),
label = "Zoom Out",
method = "relayout")),
direction = "left",
pad = list(r = 10, t = 87),
showactive = FALSE,
type = "buttons",
x = 0.1,
y = 1))
# Display the interactive map
return(map_plotly)
}
# Usage
interactiveMap <- createInteractiveMap("food-waste-by-country-2023.csv")
interactiveMap
install.packages("quarto")
library(shiny)
library(shinydashboard)
library(plotly)
library(tidyverse)
# Load your data
fwd_data <- read.csv("FWD.csv")
# UI
ui <- dashboardPage(
dashboardHeader(title = "Interactive Boxplot and Heatmap"),
dashboardSidebar(),
dashboardBody(
box(title = "Boxplot by Stage",
plotlyOutput("boxplot")),
box(title = "Heatmap of Available Data",
plotlyOutput("heatmap"))
)
)
# Server
server <- function(input, output) {
# Reactive subset of data for selected stages
selected_stages <- reactive({
fwd_data %>%
select("Stage", "Retail", "FoodServices", "Households")
})
# Boxplot
output$boxplot <- renderPlotly({
plot_ly(selected_stages(),
y = ~Retail,
type = "box",
name = "Retail") %>%
add_trace(y = ~FoodServices, name = "Food Services") %>%
add_trace(y = ~Households, name = "Households") %>%
layout(title = "Boxplot by Stage",
xaxis = list(title = "Stage"),
yaxis = list(title = "Value"))
})
# Heatmap
output$heatmap <- renderPlotly({
plot_ly(z = ~selected_stages()$Retail,
x = ~selected_stages()$Stage,
y = ~c("Retail")) %>%
add_trace(z = ~selected_stages()$FoodServices, y = ~c("Food Services")) %>%
add_trace(z = ~selected_stages()$Households, y = ~c("Households")) %>%
layout(title = "Heatmap of Available Data",
xaxis = list(title = "Stage"),
yaxis = list(title = ""),
barmode = "stack")
})
}
# Run the Shiny app
shinyApp(ui, server)
install.packages("RColorBrewer")
install.packages("ggiraph")
install.packages("sqldf")
install.packages(quarto)
install.packages("palmerpenguins")
rsconnect::setAccountInfo(name='tangcx038',
token='C3E26F4F2B74CE19760B9295BFA54916',
secret='7T/y7zdDfgtkzsR2Br7imXnHMMSJ+UNrhMfLosfB')
install.packages('rsconnect')
install.packages("rsconnect")
