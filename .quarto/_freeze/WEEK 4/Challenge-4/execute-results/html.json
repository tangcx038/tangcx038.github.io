{
  "hash": "9a7711bbc114400ad8ccca66e2c584bd",
  "result": {
    "markdown": "---\ntitle: \"Challenge-4\"\nauthor: \"Tang Ching Xian\"\ndate: \"04 SEPT 2023\"\noutput: html_document\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(echo = TRUE)\n```\n:::\n\n\n<style>\np.comment {\nbackground-color: #DBDBDB;\npadding: 10px;\nborder: 1px solid black;\nmargin-left: 25px;\nborder-radius: 5px;\nfont-style: italic;\n}\n\n</style>\n\n## Questions\n<br>\n\nLoad the \"CommQuest2023.csv\" dataset using the `read_csv()` command and assign it to a variable named \"comm_data.\" \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load Tidyverse\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\n# Read the CSV file and assign it to the variable \"comm_data\"\ncomm_data <- read.csv(\"CommQuest2023_Larger.csv\")\ncomm_data_org <- read.csv(\"CommQuest2023_Larger.csv\")\n```\n:::\n\n<br>\n\n\n#### Question-1: Communication Chronicles\n\nUsing the select command, create a new dataframe containing only the \"date,\" \"channel,\" and \"message\" columns from the \"comm_data\" dataset.\n\n**Solution:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a new dataframe with selected columns\nnew_df1<- comm_data%>% select(date,channel,message)\n# Overview of new dataframe\nglimpse(new_df1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,000\nColumns: 3\n$ date    <chr> \"2023-08-11\", \"2023-08-11\", \"2023-08-11\", \"2023-08-18\", \"2023-…\n$ channel <chr> \"Twitter\", \"Email\", \"Slack\", \"Email\", \"Slack\", \"Email\", \"Twitt…\n$ message <chr> \"Fun weekend!\", \"Hello everyone!\", \"Hello everyone!\", \"Fun wee…\n```\n:::\n:::\n\n<br>\n\n#### Question-2: Channel Selection\n\nUse the filter command to create a new dataframe that includes messages sent through the \"Twitter\" channel on August 2nd.\n\n**Solution:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create new dataframe with filtered data\nnew_df2 <- comm_data %>%filter(channel == \"Twitter\", date == \"2023-08-02\")%>%select(channel,date,message)\nglimpse(new_df2)\n```\n:::\n\n<br>\n\n#### Question-3: Chronological Order\n\nUtilizing the arrange command, arrange the \"comm_data\" dataframe in ascending order based on the \"date\" column.\n\n**Solution:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Arrange the dataframe in ascending order based on the \"date\" column\narranged_data <- comm_data %>%arrange(date)\nprint(arranged_data)\n```\n:::\n\n<br>\n\n#### Question-4: Distinct Discovery\n\nApply the distinct command to find the unique senders in the \"comm_data\" dataframe.\n\n**Solution:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Use distinct() to find unique senders\nunique_senders <- comm_data %>%distinct(sender)%>%select(sender)\nprint(unique_senders)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         sender\n1  dave@example\n2   @bob_tweets\n3   @frank_chat\n4  @erin_tweets\n5 alice@example\n6   carol_slack\n```\n:::\n:::\n\n<br>\n\n#### Question-5: Sender Stats\n\nEmploy the count and group_by commands to generate a summary table that shows the count of messages sent by each sender in the \"comm_data\" dataframe.\n\n**Solution:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Group by sender and count messages\nsummary_table <- comm_data %>%group_by(sender) %>%summarise(count = n())\nprint(summary_table)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  sender        count\n  <chr>         <int>\n1 @bob_tweets     179\n2 @erin_tweets    171\n3 @frank_chat     174\n4 alice@example   180\n5 carol_slack     141\n6 dave@example    155\n```\n:::\n\n```{.r .cell-code}\n#Another method just using count()\n##summary_table2 <- comm_data %>%group_by(sender)%>%count(sender)\n#Break down of each message and count\n##summary_table2 <- comm_data %>%group_by(sender)%>%*count(message)*\n```\n:::\n\n<br>\n\n#### Question-6: Channel Chatter Insights\n\nUsing the group_by and count commands, create a summary table that displays the count of messages sent through each communication channel in the \"comm_data\" dataframe.\n\n**Solution:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Group by channel and count messages\nsummary_table2 <- comm_data %>%group_by(channel) %>%summarise(count = n())\nprint(summary_table2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  channel count\n  <chr>   <int>\n1 Email     331\n2 Slack     320\n3 Twitter   349\n```\n:::\n\n```{.r .cell-code}\n#Another method \n##summary_table2 <- comm_data %>%group_by(channel) %>%count(channel)\n```\n:::\n\n<br>\n\n#### Question-7: Positive Pioneers\n\nUtilize the filter, select, and arrange commands to identify the top three senders with the highest average positive sentiment scores. Display their usernames and corresponding sentiment averages.\n\n**Solution:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter for positive sentiment scores\npositive_data <- comm_data %>%\n  filter(sentiment> 0)\n\n# Group by sender and calculate the average sentiment score\nsender_avg_sentiment <- positive_data %>%\n  group_by(sender) %>%\n  summarise(avg_sentiment=mean(sentiment))\n\n# Arrange senders in descending order of average sentiment score\ntop_senders <- sender_avg_sentiment %>%\n  arrange(desc(avg_sentiment))\n\n# Select the top three senders\ntop_three_senders <- top_senders %>%\n  slice(1:3)\n\n# Display the top three senders and their corresponding sentiment averages\nprint(top_three_senders)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  sender        avg_sentiment\n  <chr>                 <dbl>\n1 dave@example          0.541\n2 @frank_chat           0.528\n3 alice@example         0.493\n```\n:::\n:::\n\n<br>\n\n#### Question-8: Message Mood Over Time\n\nWith the group_by, summarise, and arrange commands, calculate the average sentiment score for each day in the \"comm_data\" dataframe.\n\n**Solution:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Group by date and calculate the average sentiment score for each day\ndaily_avg_sentiment <- comm_data %>%\n  group_by(date) %>%\n  summarise(avg_sentiment = mean(sentiment))\n\n# Arrange the results in ascending order of date\ndaily_avg_sentiment <- daily_avg_sentiment %>%\n  arrange(date)\n\n# Display the dataframe with daily average sentiment scores\nprint(daily_avg_sentiment)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 2\n   date       avg_sentiment\n   <chr>              <dbl>\n 1 2023-08-01       -0.0616\n 2 2023-08-02        0.136 \n 3 2023-08-03        0.107 \n 4 2023-08-04       -0.0510\n 5 2023-08-05        0.193 \n 6 2023-08-06       -0.0144\n 7 2023-08-07        0.0364\n 8 2023-08-08        0.0666\n 9 2023-08-09        0.0997\n10 2023-08-10       -0.0254\n11 2023-08-11       -0.0340\n12 2023-08-12        0.0668\n13 2023-08-13       -0.0604\n14 2023-08-14       -0.0692\n15 2023-08-15        0.0617\n16 2023-08-16       -0.0220\n17 2023-08-17       -0.0191\n18 2023-08-18       -0.0760\n19 2023-08-19        0.0551\n20 2023-08-20        0.0608\n```\n:::\n\n```{.r .cell-code}\n#another method\n##daily<-comm_data%>%group_by(date)%>%summarise(mean(sentiment))%>%arrange(date)\n```\n:::\n\n<br>\n\n#### Question-9: Selective Sentiments\n\nUse the filter and select commands to extract messages with a negative sentiment score (less than 0) and create a new dataframe.\n\n**Solution:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter for messages with negative sentiment scores\nnegative_sentiment_data <- comm_data %>%\n  filter(sentiment< 0)\n\nnew_df3<-negative_sentiment_data\nprint.Date(new_df3)\n\n#another method\n##negative<-comm_data%>%select(message,sentiment)%>%filter(sentiment<0)\n```\n:::\n\n<br>\n\n#### Question-10: Enhancing Engagement\n\nApply the mutate command to add a new column to the \"comm_data\" dataframe, representing a sentiment label: \"Positive,\" \"Neutral,\" or \"Negative,\" based on the sentiment score.\n\n**Solution:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Mutate to add a new column \"sentiment_label\" based on sentiment scores\ncomm_data<-comm_data %>% select(sentiment) %>% mutate(positive = as.logical(sentiment > 0), neutral = as.logical(sentiment == 0), negative = as.logical(sentiment < 0))\nprint(comm_data)\n\n\n#comm_data %>% select(sentiment) %>% mutate(sentiment_label = ifelse(as.logical(sentiment > 0), \"Positive\", ifelse(as.logical(sentiment < 0), \"Negative\", \"Neutral\")))\n#print(comm_data)\n```\n:::\n\n<br>\n\n#### Question-11: Message Impact\n\nCreate a new dataframe using the mutate and arrange commands that calculates the product of the sentiment score and the length of each message. Arrange the results in descending order.\n\n**Solution:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#SHINY ERROR, INTRA ERROR, UNABLE TO RESOLVE\n\ncomm_data %>% mutate(a = sentiment*nchar(comm_data_org$message))%>%arrange(desc(a)) \nprint(comm_data)\n```\n:::\n\n<br>\n\n#### Question-12: Daily Message Challenge\n\nUse the group_by, summarise, and arrange commands to find the day with the highest total number of characters sent across all messages in the \"comm_data\" dataframe.\n\n**Solution:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Group by date and calculate the total number of characters sent on each day\ndaily_char_count <- comm_data %>%\n  group_by(date) %>%\n  summarise(total_characters = sum(nchar(message)))\n\n#note:sum(nchar(message) can be replaced by length(message)\n\n# Arrange the results in descending order of total_characters\ndaily_char_count <- daily_char_count %>%\n  arrange(desc(total_characters))\n\n# Get the day with the highest total_characters\nday_with_highest_chars <- daily_char_count$day[1]\n\n# Optionally, you can print the day with the highest total_characters\nprint(day_with_highest_chars)\n```\n:::\n\n<br>\n\n#### Question-13: Untidy data\n\nCan you list at least two reasons why the dataset illustrated in slide 10 is non-tidy? How can it be made Tidy?\n\n**Solution:** \n1)X is not a data, can be left as NA to be recognised\n2)empty rows/observations\n3)+/- is not recognised \n4) too many variables in a column",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}