{
  "hash": "41522f49bd666ec953b0c2b0d88c0562",
  "result": {
    "markdown": "---\ntitle: \"Challenge-6\"\nauthor: \"Tang Ching Xian\"\ndate: \"15 September 2023\"\noutput: html_document\n---\n\n\n\n\n## Questions\n<br>\n\n#### Question-1: Countdown Blastoff (While Loop)\n\nCreate a program that simulates a rocket launch countdown using a while loop. Start from 10 and countdown to \"Blastoff!\" with a one-second delay between each countdown number. Print a message when the rocket launches.\n\n**Hint:** You may want to use `cat` command to print the countdown and `Sys.sleep` for incorporating the delay\n\n**Solutions:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  count <- 10\n  while (count > 0) {\n    print(count)\n    count <- count - 1\n  }\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n[1] 9\n[1] 8\n[1] 7\n[1] 6\n[1] 5\n[1] 4\n[1] 3\n[1] 2\n[1] 1\n```\n:::\n\n```{.r .cell-code}\n  cat(\"Blastoff!\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBlastoff!\n```\n:::\n\n```{.r .cell-code}\ncount <- 10\nwhile (count > 0) {\n  if (count == 1) {\n    cat(count, \"BLASTOFF!\\n\")\n  } else {\n    cat(count, \"...\")\n  }\n  Sys.sleep(1)\n  count <- count - 1\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10 ...9 ...8 ...7 ...6 ...5 ...4 ...3 ...2 ...1 BLASTOFF!\n```\n:::\n\n```{.r .cell-code}\n#involving function\n#countdown <- function() {\n#  count <- 10\n# while (count > 0) {\n#   cat(count,\"... \")\n#   Sys.sleep(1)  \n# count <- count - 1\n# }\n# cat(\"BLASTOFF!\\n\")\n#}\n\n#countdown()\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n`<div style=\"width: 100% ; height: 400px ; text-align: center; box-sizing: border-box; -moz-box-sizing: border-box; -webkit-box-sizing: border-box;\" class=\"muted well\">Shiny applications not supported in static R Markdown documents</div>`{=html}\n:::\n:::\n\n\n<br>\n\n#### Question-2: Word Reverser (for Loop)\n\nDevelop a program that takes a user-entered word and uses a while loop to print the word's characters in reverse order. For example, if the user enters \"hello,\" the program should print \"olleh.\"\n\n**Hint:** You may want to use `substr` command to access each character of the input word, and `paste` command to join the reversed letters one at a time\n\n**Solutions:** \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prompt the user for input\nword <- readline(prompt = \"Enter a word: CHING\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEnter a word: CHING\n```\n:::\n\n```{.r .cell-code}\n# Initialize an empty string for the reversed word\nreversed_word <- \"\"\n\n# Get the length of the input word\nword_length <- nchar(word)\n\n# Iterate over the characters in reverse order and append them to the reversed word\nfor (i in word_length:1) {\n  char <- substr(word, i, i)  # Get the character at position i\n  reversed_word <- paste(reversed_word, char, sep = \"\")  # Append the character to the reversed word\n}\n\n# Print the reversed word\ncat(\"Reversed word:GNIHC\", reversed_word, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReversed word:GNIHC  \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\n\n# Define a function to reverse a word\nreverse_word <- function(word) {\n  reversed <- \"\"\n  i <- nchar(word)\n  \n  while (i > 0) {\n    char <- substr(word, i, i)  # Get the character at position i\n    reversed <- paste0(reversed, char)  # Append the character to the reversed word\n    i <- i - 1\n  }\n  \n  return(reversed)\n}\n\n\n# Define the user interface\nui <- fluidPage(\n  textInput(\"word\", \"Enter a word:\"),\n  textOutput(\"reversed_word\")\n)\n\n\n# Define the server logic\nserver <- function(input, output, session) {\n  # Reactively reverse the word when the user enters it\n  reversed_word <- reactive({\n    word <- input$word\n    if (!is.null(word)) {\n      return(reverse_word(word))\n    } else {\n      return(NULL)\n    }\n  })\n\n  # Display the reversed word\n  output$reversed_word <- renderText({\n    reversed <- reversed_word()\n    if (!is.null(reversed)) {\n      paste(\"Reversed word:\", reversed)\n    } else {\n      \"\"\n    }\n  })\n}\n\n# Create the Shiny app\nshinyApp(ui, server)\n```\n\n::: {.cell-output-display}\n`<div style=\"width: 100% ; height: 400px ; text-align: center; box-sizing: border-box; -moz-box-sizing: border-box; -webkit-box-sizing: border-box;\" class=\"muted well\">Shiny applications not supported in static R Markdown documents</div>`{=html}\n:::\n:::\n\n<br>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}