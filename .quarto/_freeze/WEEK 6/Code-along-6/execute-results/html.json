{
  "hash": "1afc5ea0620c2ab783f0c460f9622db7",
  "result": {
    "markdown": "---\ntitle: \"Week-6: Code-along\"\nauthor: \"NM2207: Computational Media Literacy- Tang Ching Xian\"\ndate: \"13 September 2023\"\noutput:\n  html_document:\n  df_print: paged\npdf_document: default\n---\n\n\n\n\n# II. Code to edit and execute using the Code-along-6.Rmd file \n<br>\n\n## A. `for` loop\n<br>\n\n### 1. Simple `for` loop (Slide #6)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (x in c (3,6,9)) {\n  print(x)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n[1] 6\n[1] 9\n```\n:::\n\n```{.r .cell-code}\n#action occurs between the curly brackets (print etc.)\n```\n:::\n\n<br>\n\n### 2. `for` loops structure (Slide #7)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Left-hand side code: for loop for passing values\nfor (x in 1:8) {print(x)}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n```\n:::\n\n```{.r .cell-code}\n# for (value in list_of_values) {do soemthing (based on value)}\n```\n:::\n\n<br>\n\n::: {.cell}\n\n```{.r .cell-code}\n# Right-hand side code: for loop for passing indices\nfor (x in 1:8) \n{y <- seq(from=100, to = 200, by=5) \n  print(y[x])}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n[1] 105\n[1] 110\n[1] 115\n[1] 120\n[1] 125\n[1] 130\n[1] 135\n```\n:::\n\n```{.r .cell-code}\n#for (index in list_of_indices){give y variable with specific sequnece and do something eg print(based on index)}\n```\n:::\n\n<br>\n\n### 3. Example: find sample means (Slide #9)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find means of increasingly large samples\n#Repeating code in order to find mean \n#mean1 <- mean(rnorm(5))\n#mean2 <- mean(rnorm(10))\n#mean3 <- mean(rnorm(15))\n#mean4 <- mean(rnorm(20))\n#mean5 <- mean(rnorm(25000))\n#print(c(mean1, mean2, mean3, mean4, mean5))\n\n#determine what to loop over\nsample_sizes <- c(5,10,15,20,25000)\n#pre-allocate space to store output\nsample_means <- double(length(sample_sizes))\nfor (i in seq_along(sample_sizes)){\n  sample_means[i] <- mean(rnorm(sample_sizes[i]))\n}\n\nsample_means\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.537394265 -0.123269287  0.245934003  0.404643581  0.008127638\n```\n:::\n\n```{.r .cell-code}\n#seq_along(x) is synonymous to 1:length(x)\n```\n:::\n\n<br>\n\n### 4. Alternate ways to pre-allocate space (Slide #12)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example 3 for data_type=double\nsample_means <- rep(0, length(sample_sizes))\n```\n:::\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Initialisation of data_list\nsample_sizes <- c(5, 10, 15, 20, 25000)\n# Generate indices using seq_along\n##seq_along(sample_sizes)\n\n# Initialize a vector of zeros of the same size as sample_sizes\nsample_means <- rep(0, length(sample_sizes))\n\n# # Another way to initialize a vector of zeros is here below\n# sample_means <- numeric(length(sample_sizes))\n# Loop over each sample size and calculate the mean\nfor (i in seq_along(sample_sizes)) {\n  # Generate a random sample from a normal distribution and calculate its mean\n  sample_means[i] <- mean(rnorm(sample_sizes[i]))\n}\n\n# Print the calculated sample means\nprint(sample_means)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  0.0449979  0.4278625  0.1698709 -0.1523231  0.0106975\n```\n:::\n:::\n\n<br>\n\n### 5. Review: Vectorized operations (Slide #18)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example: bad idea!\n# Vector with numbers from 7 to 11\na <- 7:11\n# Vector with numbers from 8 to 12\nb <- 8:12\n# Vector of all zeros of length 5\nout <- rep(0L, 5)\n# Loop along the length of vector a\nfor (i in seq_along(a)) {\n# Each entry of out is the sum of the corres\nout[i] <- a[i] + b[i]\n}\nout\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 15 17 19 21 23\n```\n:::\n:::\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Taking advantage of vectorization\n# Vector with numbers from 7 to 11\na <- 7:11\n# Vector with numbers from 8 to 12\nb <- 8:12\nout <- a + b\nout\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 15 17 19 21 23\n```\n:::\n:::\n\n<br>\n\n## B. Functionals\n\n### 6. `for` loops vs Functionals (Slides #23 and #24)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Initialise a vector with the size of 5 different samples\nsample_sizes <- c(5, 10, 15, 20, 25000)\n# Create a functional- function inside a function\nsample_summary <- function(sample_sizes, fun) {\n# Initialise a vector of the same size as sample_sizes\nout <- vector(\"double\", length(sample_sizes))\n# Run the for loop for as long as the length of sample_sizes\nfor (i in seq_along(sample_sizes)) {\n# Perform operations indicated fun\nout[i] <- fun(rnorm(sample_sizes[i]))\n}\nreturn(out)\n}\n```\n:::\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Slide 24\n#Compute mean\nsample_summary(sample_sizes,mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.51264933  0.17238713 -0.34392055  0.03707080 -0.01094609\n```\n:::\n\n```{.r .cell-code}\n# Compute median\nsample_summary(sample_sizes,median)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.1096619032  0.7760499464 -0.6279026137  0.1671702487  0.0003318646\n```\n:::\n\n```{.r .cell-code}\n# Compute sd\nsample_summary(sample_sizes,sd)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.8745545 0.5661830 0.8371257 0.8014194 0.9993232\n```\n:::\n:::\n\n<br>\n\n## C. `while` loop\n\n### 7. `while` loop (Slides #27)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Left-hand side code: for loop\nfor(i in 1:5){\nprint(i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n```\n:::\n:::\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Right-hand side code: while loop\ni <- 1\nwhile (i <= 5) {\nprint(i)\ni <- i + 1\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n```\n:::\n:::\n\n<br>\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}