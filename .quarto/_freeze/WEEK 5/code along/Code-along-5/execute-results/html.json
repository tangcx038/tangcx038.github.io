{
  "hash": "8d89eec81833981e581670f2e6da18b0",
  "result": {
    "markdown": "---\ntitle: \"Week-5: Code-along\"\nauthor: \"Tang Ching Xian\"\ndate: \"12 September 2023\"\noutput:\n  html_document:\n  df_print: paged\npdf_document: default\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(echo = TRUE)\n```\n:::\n\n\n# II. Code to edit and execute using the Code-along.Rmd file \n<br>\n\n## A. Writing a function\n<br>\n\n### 1. Write a function to print a \"Hello\" message (Slide #14)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define a function to print a \"Hello\" message to a person\nsay_hello_to <- function(name) {\n  print(paste0(\"Hello \", name, \"!\"))\n}\n```\n:::\n\n<br>\n\n### 2. Function call with different input names (Slide #15)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Call the function and pass a name\nsay_hello_to('Kashif')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello Kashif!\"\n```\n:::\n\n```{.r .cell-code}\nsay_hello_to('Zach')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello Zach!\"\n```\n:::\n\n```{.r .cell-code}\nsay_hello_to('Deniz')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello Deniz!\"\n```\n:::\n:::\n\n<br>\n\n### 3. typeof primitive functions (Slide #16)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(`+`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"builtin\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(sum)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"builtin\"\n```\n:::\n:::\n\n<br>\n\n### 4. typeof user-defined functions (Slide #17)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(say_hello_to)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"closure\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"closure\"\n```\n:::\n:::\n\n<br>\n\n### 5. Function to calculate mean of a sample (Slide #19)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalc_sample_mean <- function(sample_size) {\nmean(rnorm(sample_size))\n}\n```\n:::\n\n<br>\n\n### 6. Test your function (Slide #22)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalc_sample_mean(1000)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.001027308\n```\n:::\n:::\n\n<br>\n\n::: {.cell}\n\n```{.r .cell-code}\nvalues <- c(100, 300, 3000)\nsample_mean <- mean(values)\nprint(sample_mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1133.333\n```\n:::\n:::\n\n#Another method\nCalculate_sample_mean <- mean(sample_sizes =c(100, 300, 3000))\n```\n<br>\n\n### 7. Customizing the function to suit input (Slide #23)\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\n#creating a vector to test our function\nsample_tibble <- tibble(sample_sizes =\nc(100, 300, 3000))\n#using rowwise groups the data by row,\n# allowing calc_sample_mean\nsample_tibble %>%\ngroup_by(sample_sizes) %>%\nmutate(sample_means =\ncalc_sample_mean(sample_sizes))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n# Groups:   sample_sizes [3]\n  sample_sizes sample_means\n         <dbl>        <dbl>\n1          100       0.0286\n2          300       0.0584\n3         3000       0.0120\n```\n:::\n:::\n<br>\n\n### 8. Setting defaults (Slide #25)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First define the function\ncalc_sample_mean <- function(sample_size,\nour_mean=0,\nour_sd=1) {\nsample <- rnorm(sample_size,\nmean = our_mean,\nsd = our_sd)\nmean(sample)\n}\n# Call the function\ncalc_sample_mean(sample_size = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.4408933\n```\n:::\n:::\n\n<br>\n\n### 9. Different input combinations (Slide #26)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalc_sample_mean(10, our_sd = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.1987395\n```\n:::\n\n```{.r .cell-code}\ncalc_sample_mean(10, our_mean = 6) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6.011548\n```\n:::\n\n```{.r .cell-code}\ncalc_sample_mean(10, 6, 2) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.637422\n```\n:::\n:::\n\n<br>\n\n### 10. Different input combinations (Slide #27)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set error=TRUE to see the error message in the output\ncalc_sample_mean(our_mean = 5)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in calc_sample_mean(our_mean = 5): argument \"sample_size\" is missing, with no default\n```\n:::\n:::\n\n<br>\n\n### 11. Some more examples (Slide #28)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd_two <- function(x) {\nx+2\n}\n#Example 1\nadd_two(4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n#Example 2\nadd_two(-34)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -32\n```\n:::\n\n```{.r .cell-code}\n#Example 3\nadd_two(5.784)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7.784\n```\n:::\n\n```{.r .cell-code}\n#There are no errors in this code, and it demonstrates that the add_two function can handle different data types (integers and floating-point numbers) without issues.\n```\n:::\n\n<br>\n\n## B. Scoping\n<br>\n\n### 12. Multiple assignment of z (Slide #36)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Initialize z\nz <- 1\nsprintf(\"The value assigned to z outside the function is %d\",z)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"The value assigned to z outside the function is 1\"\n```\n:::\n\n```{.r .cell-code}\n## [1] \"The value assigned to z outside the function is 1\"\n# declare a function, notice how we pass a value of 2 for z\nfoo <- function(z = 2) {\n# reassigning z\nz <- 3\nreturn(z+3)\n}\nfoo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n## [1] 6\n```\n:::\n\n<br>\n\n### 13. Multiple assignment of z (Slide #37)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Initialize z\nz <- 1\n# declare a function, notice how we pass a value of 2 for z\nfoo <- function(z = 2) {\n# reassigning z\nz <- 3\nreturn(z+3)\n}\n# another reassignment of z\nfoo(z = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n# Accessing z outside the function\n```\n:::\n\n<br>",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}